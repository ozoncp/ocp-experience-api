// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_experience_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpExperienceApiClient is the client API for OcpExperienceApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpExperienceApiClient interface {
	// ListExperienceV1 returns a list of experiences
	ListExperienceV1(ctx context.Context, in *ListExperienceV1Request, opts ...grpc.CallOption) (*ListExperienceV1Response, error)
	// DescribeExperienceV1 returns detailed information of an experience
	DescribeExperienceV1(ctx context.Context, in *DescribeExperienceV1Request, opts ...grpc.CallOption) (*DescribeExperienceV1Response, error)
	// CreateExperienceV1 creates new experience. Returns created object id
	CreateExperienceV1(ctx context.Context, in *CreateExperienceV1Request, opts ...grpc.CallOption) (*CreateExperienceV1Response, error)
	// RemoveExperienceV1 removes experience by id. Returns a removing result
	RemoveExperienceV1(ctx context.Context, in *RemoveExperienceV1Request, opts ...grpc.CallOption) (*RemoveExperienceV1Response, error)
}

type ocpExperienceApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpExperienceApiClient(cc grpc.ClientConnInterface) OcpExperienceApiClient {
	return &ocpExperienceApiClient{cc}
}

func (c *ocpExperienceApiClient) ListExperienceV1(ctx context.Context, in *ListExperienceV1Request, opts ...grpc.CallOption) (*ListExperienceV1Response, error) {
	out := new(ListExperienceV1Response)
	err := c.cc.Invoke(ctx, "/ocp.task.api.OcpExperienceApi/ListExperienceV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpExperienceApiClient) DescribeExperienceV1(ctx context.Context, in *DescribeExperienceV1Request, opts ...grpc.CallOption) (*DescribeExperienceV1Response, error) {
	out := new(DescribeExperienceV1Response)
	err := c.cc.Invoke(ctx, "/ocp.task.api.OcpExperienceApi/DescribeExperienceV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpExperienceApiClient) CreateExperienceV1(ctx context.Context, in *CreateExperienceV1Request, opts ...grpc.CallOption) (*CreateExperienceV1Response, error) {
	out := new(CreateExperienceV1Response)
	err := c.cc.Invoke(ctx, "/ocp.task.api.OcpExperienceApi/CreateExperienceV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpExperienceApiClient) RemoveExperienceV1(ctx context.Context, in *RemoveExperienceV1Request, opts ...grpc.CallOption) (*RemoveExperienceV1Response, error) {
	out := new(RemoveExperienceV1Response)
	err := c.cc.Invoke(ctx, "/ocp.task.api.OcpExperienceApi/RemoveExperienceV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpExperienceApiServer is the server API for OcpExperienceApi service.
// All implementations must embed UnimplementedOcpExperienceApiServer
// for forward compatibility
type OcpExperienceApiServer interface {
	// ListExperienceV1 returns a list of experiences
	ListExperienceV1(context.Context, *ListExperienceV1Request) (*ListExperienceV1Response, error)
	// DescribeExperienceV1 returns detailed information of an experience
	DescribeExperienceV1(context.Context, *DescribeExperienceV1Request) (*DescribeExperienceV1Response, error)
	// CreateExperienceV1 creates new experience. Returns created object id
	CreateExperienceV1(context.Context, *CreateExperienceV1Request) (*CreateExperienceV1Response, error)
	// RemoveExperienceV1 removes experience by id. Returns a removing result
	RemoveExperienceV1(context.Context, *RemoveExperienceV1Request) (*RemoveExperienceV1Response, error)
	mustEmbedUnimplementedOcpExperienceApiServer()
}

// UnimplementedOcpExperienceApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpExperienceApiServer struct {
}

func (UnimplementedOcpExperienceApiServer) ListExperienceV1(context.Context, *ListExperienceV1Request) (*ListExperienceV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExperienceV1 not implemented")
}
func (UnimplementedOcpExperienceApiServer) DescribeExperienceV1(context.Context, *DescribeExperienceV1Request) (*DescribeExperienceV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeExperienceV1 not implemented")
}
func (UnimplementedOcpExperienceApiServer) CreateExperienceV1(context.Context, *CreateExperienceV1Request) (*CreateExperienceV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExperienceV1 not implemented")
}
func (UnimplementedOcpExperienceApiServer) RemoveExperienceV1(context.Context, *RemoveExperienceV1Request) (*RemoveExperienceV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveExperienceV1 not implemented")
}
func (UnimplementedOcpExperienceApiServer) mustEmbedUnimplementedOcpExperienceApiServer() {}

// UnsafeOcpExperienceApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpExperienceApiServer will
// result in compilation errors.
type UnsafeOcpExperienceApiServer interface {
	mustEmbedUnimplementedOcpExperienceApiServer()
}

func RegisterOcpExperienceApiServer(s grpc.ServiceRegistrar, srv OcpExperienceApiServer) {
	s.RegisterService(&OcpExperienceApi_ServiceDesc, srv)
}

func _OcpExperienceApi_ListExperienceV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExperienceV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpExperienceApiServer).ListExperienceV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.task.api.OcpExperienceApi/ListExperienceV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpExperienceApiServer).ListExperienceV1(ctx, req.(*ListExperienceV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpExperienceApi_DescribeExperienceV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeExperienceV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpExperienceApiServer).DescribeExperienceV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.task.api.OcpExperienceApi/DescribeExperienceV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpExperienceApiServer).DescribeExperienceV1(ctx, req.(*DescribeExperienceV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpExperienceApi_CreateExperienceV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExperienceV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpExperienceApiServer).CreateExperienceV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.task.api.OcpExperienceApi/CreateExperienceV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpExperienceApiServer).CreateExperienceV1(ctx, req.(*CreateExperienceV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpExperienceApi_RemoveExperienceV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveExperienceV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpExperienceApiServer).RemoveExperienceV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.task.api.OcpExperienceApi/RemoveExperienceV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpExperienceApiServer).RemoveExperienceV1(ctx, req.(*RemoveExperienceV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpExperienceApi_ServiceDesc is the grpc.ServiceDesc for OcpExperienceApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpExperienceApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.task.api.OcpExperienceApi",
	HandlerType: (*OcpExperienceApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListExperienceV1",
			Handler:    _OcpExperienceApi_ListExperienceV1_Handler,
		},
		{
			MethodName: "DescribeExperienceV1",
			Handler:    _OcpExperienceApi_DescribeExperienceV1_Handler,
		},
		{
			MethodName: "CreateExperienceV1",
			Handler:    _OcpExperienceApi_CreateExperienceV1_Handler,
		},
		{
			MethodName: "RemoveExperienceV1",
			Handler:    _OcpExperienceApi_RemoveExperienceV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-experience-api/ocp-experience-api.proto",
}
