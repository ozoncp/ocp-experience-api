// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ocp-experience-api/ocp-experience-api.proto

package ocp_experience_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on ListExperienceV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListExperienceV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetLimit(); val <= 0 || val > 10000 {
		return ListExperienceV1RequestValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 10000]",
		}
	}

	if m.GetOffset() < 0 {
		return ListExperienceV1RequestValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
	}

	return nil
}

// ListExperienceV1RequestValidationError is the validation error returned by
// ListExperienceV1Request.Validate if the designated constraints aren't met.
type ListExperienceV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListExperienceV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListExperienceV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListExperienceV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListExperienceV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListExperienceV1RequestValidationError) ErrorName() string {
	return "ListExperienceV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListExperienceV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListExperienceV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListExperienceV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListExperienceV1RequestValidationError{}

// Validate checks the field values on ListExperienceV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListExperienceV1Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetExperiences() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListExperienceV1ResponseValidationError{
					field:  fmt.Sprintf("Experiences[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListExperienceV1ResponseValidationError is the validation error returned by
// ListExperienceV1Response.Validate if the designated constraints aren't met.
type ListExperienceV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListExperienceV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListExperienceV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListExperienceV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListExperienceV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListExperienceV1ResponseValidationError) ErrorName() string {
	return "ListExperienceV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListExperienceV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListExperienceV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListExperienceV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListExperienceV1ResponseValidationError{}

// Validate checks the field values on CreateExperienceV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateExperienceV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserId() <= 0 {
		return CreateExperienceV1RequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Type

	if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateExperienceV1RequestValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateExperienceV1RequestValidationError{
				field:  "To",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Level

	return nil
}

// CreateExperienceV1RequestValidationError is the validation error returned by
// CreateExperienceV1Request.Validate if the designated constraints aren't met.
type CreateExperienceV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateExperienceV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateExperienceV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateExperienceV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateExperienceV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateExperienceV1RequestValidationError) ErrorName() string {
	return "CreateExperienceV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateExperienceV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateExperienceV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateExperienceV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateExperienceV1RequestValidationError{}

// Validate checks the field values on CreateExperienceV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateExperienceV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreateExperienceV1ResponseValidationError is the validation error returned
// by CreateExperienceV1Response.Validate if the designated constraints aren't met.
type CreateExperienceV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateExperienceV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateExperienceV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateExperienceV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateExperienceV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateExperienceV1ResponseValidationError) ErrorName() string {
	return "CreateExperienceV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateExperienceV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateExperienceV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateExperienceV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateExperienceV1ResponseValidationError{}

// Validate checks the field values on RemoveExperienceV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveExperienceV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return RemoveExperienceV1RequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// RemoveExperienceV1RequestValidationError is the validation error returned by
// RemoveExperienceV1Request.Validate if the designated constraints aren't met.
type RemoveExperienceV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveExperienceV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveExperienceV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveExperienceV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveExperienceV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveExperienceV1RequestValidationError) ErrorName() string {
	return "RemoveExperienceV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveExperienceV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveExperienceV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveExperienceV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveExperienceV1RequestValidationError{}

// Validate checks the field values on RemoveExperienceV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveExperienceV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Removed

	return nil
}

// RemoveExperienceV1ResponseValidationError is the validation error returned
// by RemoveExperienceV1Response.Validate if the designated constraints aren't met.
type RemoveExperienceV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveExperienceV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveExperienceV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveExperienceV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveExperienceV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveExperienceV1ResponseValidationError) ErrorName() string {
	return "RemoveExperienceV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveExperienceV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveExperienceV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveExperienceV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveExperienceV1ResponseValidationError{}

// Validate checks the field values on DescribeExperienceV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeExperienceV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return DescribeExperienceV1RequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DescribeExperienceV1RequestValidationError is the validation error returned
// by DescribeExperienceV1Request.Validate if the designated constraints
// aren't met.
type DescribeExperienceV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeExperienceV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeExperienceV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeExperienceV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeExperienceV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeExperienceV1RequestValidationError) ErrorName() string {
	return "DescribeExperienceV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeExperienceV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeExperienceV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeExperienceV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeExperienceV1RequestValidationError{}

// Validate checks the field values on DescribeExperienceV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeExperienceV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetExperience()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeExperienceV1ResponseValidationError{
				field:  "Experience",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeExperienceV1ResponseValidationError is the validation error returned
// by DescribeExperienceV1Response.Validate if the designated constraints
// aren't met.
type DescribeExperienceV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeExperienceV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeExperienceV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeExperienceV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeExperienceV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeExperienceV1ResponseValidationError) ErrorName() string {
	return "DescribeExperienceV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeExperienceV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeExperienceV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeExperienceV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeExperienceV1ResponseValidationError{}

// Validate checks the field values on Experience with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Experience) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for Type

	if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExperienceValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExperienceValidationError{
				field:  "To",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Level

	return nil
}

// ExperienceValidationError is the validation error returned by
// Experience.Validate if the designated constraints aren't met.
type ExperienceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExperienceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExperienceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExperienceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExperienceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExperienceValidationError) ErrorName() string { return "ExperienceValidationError" }

// Error satisfies the builtin error interface
func (e ExperienceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExperience.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExperienceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExperienceValidationError{}

// Validate checks the field values on MultiCreateExperienceV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateExperienceV1Request) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetExperiences() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCreateExperienceV1RequestValidationError{
					field:  fmt.Sprintf("Experiences[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MultiCreateExperienceV1RequestValidationError is the validation error
// returned by MultiCreateExperienceV1Request.Validate if the designated
// constraints aren't met.
type MultiCreateExperienceV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateExperienceV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateExperienceV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateExperienceV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateExperienceV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateExperienceV1RequestValidationError) ErrorName() string {
	return "MultiCreateExperienceV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateExperienceV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateExperienceV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateExperienceV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateExperienceV1RequestValidationError{}

// Validate checks the field values on MultiCreateExperienceV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateExperienceV1Response) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// MultiCreateExperienceV1ResponseValidationError is the validation error
// returned by MultiCreateExperienceV1Response.Validate if the designated
// constraints aren't met.
type MultiCreateExperienceV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateExperienceV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateExperienceV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateExperienceV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateExperienceV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateExperienceV1ResponseValidationError) ErrorName() string {
	return "MultiCreateExperienceV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateExperienceV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateExperienceV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateExperienceV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateExperienceV1ResponseValidationError{}

// Validate checks the field values on UpdateExperienceV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateExperienceV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return UpdateExperienceV1RequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	if m.GetUserId() <= 0 {
		return UpdateExperienceV1RequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Type

	if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateExperienceV1RequestValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateExperienceV1RequestValidationError{
				field:  "To",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Level

	return nil
}

// UpdateExperienceV1RequestValidationError is the validation error returned by
// UpdateExperienceV1Request.Validate if the designated constraints aren't met.
type UpdateExperienceV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateExperienceV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateExperienceV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateExperienceV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateExperienceV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateExperienceV1RequestValidationError) ErrorName() string {
	return "UpdateExperienceV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateExperienceV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateExperienceV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateExperienceV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateExperienceV1RequestValidationError{}

// Validate checks the field values on UpdateExperienceV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateExperienceV1Response) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateExperienceV1ResponseValidationError is the validation error returned
// by UpdateExperienceV1Response.Validate if the designated constraints aren't met.
type UpdateExperienceV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateExperienceV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateExperienceV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateExperienceV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateExperienceV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateExperienceV1ResponseValidationError) ErrorName() string {
	return "UpdateExperienceV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateExperienceV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateExperienceV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateExperienceV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateExperienceV1ResponseValidationError{}

// Validate checks the field values on ExperienceAPIEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ExperienceAPIEvent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Event

	// no validation rules for Error

	// no validation rules for TraceSpan

	return nil
}

// ExperienceAPIEventValidationError is the validation error returned by
// ExperienceAPIEvent.Validate if the designated constraints aren't met.
type ExperienceAPIEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExperienceAPIEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExperienceAPIEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExperienceAPIEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExperienceAPIEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExperienceAPIEventValidationError) ErrorName() string {
	return "ExperienceAPIEventValidationError"
}

// Error satisfies the builtin error interface
func (e ExperienceAPIEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExperienceAPIEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExperienceAPIEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExperienceAPIEventValidationError{}
